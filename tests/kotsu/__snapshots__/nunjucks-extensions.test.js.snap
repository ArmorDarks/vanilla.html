// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Nunjucks filter \`render()\` should render current context macro 1`] = `
"
      

      
      <article>Value: This is macro value</article>
       with content and outer content
    "
`;

exports[`Nunjucks filter \`render()\` should render current context macro's caller 1`] = `
"
      

      
      <article>Caller value: <p>6 This is caller value</p>
      </article>
      
    "
`;

exports[`Nunjucks filter \`render()\` should render current context macro's inner 1`] = `
"
      

      
      <article>8 and value: This is macro value</article>
       and outer content
    "
`;

exports[`Nunjucks filter \`render()\` should render current context variable 1`] = `
"
      

      testing __globalVar value with content and outer content
    "
`;

exports[`Nunjucks filter \`render()\` should render template 1`] = `"9 with content and outer content"`;

exports[`Nunjucks global function \`config()\` when value argument not provided should return property value 1`] = `"original value"`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with mixed Object and Array values 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
      "new value1",
      "new value2",
      null,
      "new value3",
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
  "test": "new test value",
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Array 1`] = `
Array [
  null,
  "new value1",
  "new value2",
  "new value3",
  "original value",
  2,
  100,
  Array [
    "original deep array",
  ],
]
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Array with array-based deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      null,
      "new value1",
      "new value2",
      "new value3",
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Array with deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      null,
      "new value1",
      "new value2",
      "new value3",
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Object 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
    "test2": "new nested test2 value",
  },
  "test": "new test value",
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Object with array-based deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
        "test2": "new nested test2 value",
      },
      "originalValue": "some object original value",
      "test": "new test value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should merge context property with specified Object with deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
        "test2": "new nested test2 value",
      },
      "originalValue": "some object original value",
      "test": "new test value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context value when setting property value 1`] = `"original value"`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context value when setting property value with array-based deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context value when setting property value with deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Array 1`] = `
Array [
  "new value1",
  "new value2",
  "new value3",
  "original value",
  2,
  100,
  Array [
    "original deep array",
  ],
]
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Array with array-based deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "new value1",
      "new value2",
      "new value3",
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Array with deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "new value1",
      "new value2",
      "new value3",
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Object 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Object with array-based deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should not override already existing context values when merging Object with deep path 1`] = `
Object {
  "some": Object {
    "array": Array [
      "original value",
      2,
      100,
      Array [
        "original deep array",
      ],
    ],
    "object": Object {
      "nestedOriginalValue": Object {
        "deepOriginalValue": "deep object original value",
      },
      "originalValue": "some object original value",
    },
  },
}
`;

exports[`Nunjucks global function \`config()\` when value argument provided should set in context specified value 1`] = `"test value"`;

exports[`Nunjucks global function \`config()\` when value argument provided should set in context specified value with array-based deep path 1`] = `"test array path value"`;

exports[`Nunjucks global function \`config()\` when value argument provided should set in context specified value with deep path 1`] = `"test some path value"`;

exports[`Nunjucks global function \`fullurl()\` should not mutate\` url with ftp protocol 1`] = `"ftp://ftp.dev"`;

exports[`Nunjucks global function \`fullurl()\` should not mutate\` url with http protocol 1`] = `"http://http.dev"`;

exports[`Nunjucks global function \`fullurl()\` should not mutate\` url with https protocol 1`] = `"https://https.dev"`;

exports[`Nunjucks global function \`fullurl()\` should not mutate\` url with relative protocol 1`] = `"//relative.dev"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` absolute url 1`] = `"https://kotsu.2bad.me/abs/absinner"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` absolute url and \`page.url\` starting with \`/\` 1`] = `"https://kotsu.2bad.me/abs"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` absolute url and \`page.url\` starting with \`/\` 2`] = `"https://kotsu.2bad.me/abs"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url 1`] = `"https://kotsu.2bad.me/mockContext/rel"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url 2`] = `"https://kotsu.2bad.me/mockContext/rel/relinner"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url 3`] = `"https://kotsu.2bad.me/dotsrel/relinner"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url 4`] = `"https://kotsu.2bad.me/relinner"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url and \`page.url\` starting with \`/\` 1`] = `"https://kotsu.2bad.me/rel"`;

exports[`Nunjucks global function \`fullurl()\` should prepend site homepage to\` relative url and \`page.url\` starting with \`/\` 2`] = `"https://kotsu.2bad.me/rootPage/rel"`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` falsy url 1`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`undefined\` or undefined provided"
`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` falsy url 2`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`undefined\` or undefined provided"
`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` falsy url 3`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`boolean\` or undefined provided"
`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` falsy url 4`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`undefined\` or undefined provided"
`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` falsy url 5`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`number\` or undefined provided"
`;

exports[`Nunjucks global function \`fullurl()\` should throw error with\` number url 1`] = `
"(unknown path)
  Error: [fullurl] url should be \`string\`, but \`number\` or undefined provided"
`;

exports[`Nunjucks global function \`getPage()\` should force-render received data with current context 1`] = `"__globarvar value: testing __globalvar value"`;

exports[`Nunjucks global function \`getPage()\` should force-render received data with current custom functions 1`] = `"Crumbled url: blog"`;

exports[`Nunjucks global function \`getPage()\` should get from nested Array-based path 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from nested dot-notation path 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from nested url-like path 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from nested url-like path with leading and trailing slash 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from nested url-like path with leading slash 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from nested url-like path with trailing slash 1`] = `
Object {
  "url": "/blog/2015-10-12-example-article",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root 1`] = `
Object {
  "url": "/",
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root Array-based path 1`] = `
Object {
  "2015-10-12-example-article": Object {
    "props": Object {
      "url": "/blog/2015-10-12-example-article",
    },
  },
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root string-based path 1`] = `
Object {
  "2015-10-12-example-article": Object {
    "props": Object {
      "url": "/blog/2015-10-12-example-article",
    },
  },
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root string-based path with leading and trailing slashes 1`] = `
Object {
  "2015-10-12-example-article": Object {
    "props": Object {
      "url": "/blog/2015-10-12-example-article",
    },
  },
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root string-based path with leading slash 1`] = `
Object {
  "2015-10-12-example-article": Object {
    "props": Object {
      "url": "/blog/2015-10-12-example-article",
    },
  },
}
`;

exports[`Nunjucks global function \`getPage()\` should get from root string-based path with trailing slash 1`] = `
Object {
  "2015-10-12-example-article": Object {
    "props": Object {
      "url": "/blog/2015-10-12-example-article",
    },
  },
}
`;
