


// =======================================
// ^SPRITES.MAP
// =======================================

{{!-- This isn't the comment you're looking for --}}
// DO NOT EDIT!
// This file generated by Grunt task.
// It will override all your changes.


// ---------------------------------------
// Sprites map
// ---------------------------------------
//
// Dynamically generated map with list of sprites.
//
// Based on images which should be placed in specified in
// Grunt settings `sprites` directory.
//
// Each sprite will be converted into class with specified
// in project settings `$sprite-prefix`.
// By default it's `sprite--`
//
// @dep grunt-spritesmith
//
// @type {map} - 2-dimensional array of sprites.


$sprites: (
	{{#items}}
	'{{name}}': ( width: {{px.width}}, height: {{px.height}}, offset-x: {{px.offset_x}}, offset-y: {{px.offset_y}} ),
	{{/items}}
);


// Move somewhere
$sprite-prefix: sprite-- !default;


// ---------------------------------------
// Mixins
// ---------------------------------------

// ----
// Call all sprites
//
// Simple mixin to convert all sprites into  classes
// withing sinle loop.
//
// All sprites names will be appended with specified
// in projects settings `$sprite-prefix`
//
// @dep {map} $sprites                   - 2-dimensional array of sprites
//      {string=sprite--} $sprite-prefix - prefix which will be appended to
//                                         sprite name

@mixin sprites() {

	@each $name, $params in $sprites {

		$prefixed-name: $sprite-prefix + $name;

		.#{$prefixed-name} {
			width: map-get($params, width);
			height: map-get($params, height);
			background-position: map-get($params, offset-x) map-get($params, offset-y);
		}

	}

}

// ----
// Include all sprites, converted to classes

@include sprites();



// ----
// Quick way to look for specific property in
// 2-dimensional map `$sprites`
//
// @todo Improve docs

@function sprite-map($sprite, $property:false) {

	@if map-has-key($sprites, $sprite) {
		$sprite: map-get($sprites, $sprite);
	} @else {
		@error "Unknown sprite `#{$sprite}` in `$sprites`.";
		@return null;
	}

	@if map-has-key($sprite, $property) {
		@return map-get($sprite, $property);
	} @else {
		@error "Unknown sprite property `#{$property}` in `$sprites`.";
		@return null;
	}

}



// ----
// Call specific sprite from 2-dimensional map `$sprites`
// with specific parameters or CSS properties
//
// @example
//
//		@include sprite(arrow) { border: 1px } ;
//		@include sprite(arrow-multi, vertical, 3px, --white, --red, --blue);
//
// @todo Improve docs

@mixin sprite($name, $type:false, $padding:false, $sufix-1:false, $sufix-2:false, $sufix-3:false) {

	$prefixed-name: $sprite-prefix + $name;

	$width:       sprite-map($name, width)  !default;
	$height:      sprite-map($name, height) !default;
	$full-width:  0px !default;
	$full-height: 0px !default;

	@if $sufix-1 == false {

		.#{$prefixed-name} {
			width: sprite-map($name, width);
			height: sprite-map($name, height);
			background-position: sprite-map($name, offset-x) sprite-map($name, offset-y);
			@content
		}

	} @else if $sufix-1 != false and $sufix-3 == false {

		@if $type == horizontal or $type == hor {
			$width:  (sprite-map($name, width) - $padding) / 2;
			$full-width:  $width + $padding;
		} @else {
			$height: (sprite-map($name, height) - $padding)  / 2;
			$full-height: $height + $padding;
		}

		.#{$prefixed-name} { width: $width; height: $height; @content }
		.#{$prefixed-name}#{$sufix-1} { background-position: sprite-map($name, offset-x) sprite-map($name, offset-y); }
		.#{$prefixed-name}#{$sufix-2} { background-position: sprite-map($name, offset-x) - $full-width sprite-map($name, offset-y) - $full-height; }

	} @else {

		@if $type == horizontal or $type == hor {
			$width:  (sprite-map($name, width) - $padding * 2) / 3;
			$full-width:  $width + $padding;
		} @else {
			$height: (sprite-map($name, height) - $padding * 2 )  / 3;
			$full-height: $height + $padding;
		}

		.#{$prefixed-name}           { width: $width; height: $height; @content }
		.#{$prefixed-name}#{$sufix-1} { background-position: sprite-map($name, offset-x) sprite-map($name, offset-y); }
		.#{$prefixed-name}#{$sufix-2} { background-position: sprite-map($name, offset-x) - $full-width sprite-map($name, offset-y) - $full-height; }
		.#{$prefixed-name}#{$sufix-3} { background-position: sprite-map($name, offset-x) - $full-width * 2 sprite-map($name, offset-y) - $full-height * 2; }

	}

}